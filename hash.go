package vsolver

import (
	"crypto/sha256"
	"fmt"
	"sort"
)

// HashInputs computes a hash digest of all data in a SolveOpts that are as
// function inputs to Solve().
//
// The digest returned from this function is the same as the digest that would
// be included with a Solve() Result. As such, it's appropriate for comparison
// against the digest stored in a lock file, generated by a previous Solve(): if
// the digests match, then manifest and lock are in sync, and a Solve() is
// unnecessary.
//
// (Basically, this is for memoization.)
func (s *solver) HashInputs() ([]byte, error) {
	// Do these checks up front before any other work is needed, as they're the
	// only things that can cause errors
	if err := s.b.verifyRoot(s.args.Root); err != nil {
		// This will already be a BadOptsFailure
		return nil, err
	}

	// Pass in magic root values, and the bridge will analyze the right thing
	ptree, err := s.b.listPackages(ProjectIdentifier{LocalName: s.rm.Name()}, nil)
	if err != nil {
		return nil, badOptsFailure(fmt.Sprintf("Error while parsing imports under %s: %s", s.args.Root, err.Error()))
	}

	d, dd := s.args.Manifest.DependencyConstraints(), s.args.Manifest.TestDependencyConstraints()
	p := make(sortedDeps, len(d))
	copy(p, d)
	p = append(p, dd...)

	sort.Stable(p)

	// We have everything we need; now, compute the hash.
	h := sha256.New()
	for _, pd := range p {
		h.Write([]byte(pd.Ident.LocalName))
		h.Write([]byte(pd.Ident.NetworkName))
		// FIXME Constraint.String() is a surjective-only transformation - tags
		// and branches with the same name are written out as the same string.
		// This could, albeit rarely, result in input collisions when a real
		// change has occurred.
		h.Write([]byte(pd.Constraint.String()))
	}

	// The stdlib packages play the same functional role in solving as ignores.
	// Because they change, albeit quite infrequently, we have to include them
	// in the hash.
	h.Write([]byte(stdlibPkgs))

	// Write each of the packages, or the errors that were found for a
	// particular subpath, into the hash.
	for _, perr := range ptree.Packages {
		if perr.Err != nil {
			h.Write([]byte(perr.Err.Error()))
		} else {
			h.Write([]byte(perr.P.Name))
			h.Write([]byte(perr.P.CommentPath))
			h.Write([]byte(perr.P.ImportPath))
			for _, imp := range perr.P.Imports {
				h.Write([]byte(imp))
			}
			for _, imp := range perr.P.TestImports {
				h.Write([]byte(imp))
			}
		}
	}

	// Add the package ignores, if any.
	if len(s.ig) > 0 {
		// Dump and sort the ignores
		ig := make([]string, len(s.ig))
		k := 0
		for pkg := range s.ig {
			ig[k] = pkg
			k++
		}
		sort.Strings(ig)

		for _, igp := range ig {
			h.Write([]byte(igp))
		}
	}

	// TODO overrides
	// TODO aliases
	return h.Sum(nil), nil
}

type sortedDeps []ProjectDep

func (s sortedDeps) Len() int {
	return len(s)
}

func (s sortedDeps) Swap(i, j int) {
	s[i], s[j] = s[j], s[i]
}

func (s sortedDeps) Less(i, j int) bool {
	return s[i].Ident.less(s[j].Ident)
}
